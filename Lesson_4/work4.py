                # I. АНОНИМНЫЕ LAMBDA-ФУНКЦИИ
'''
    Для того чтобы сократить код, т.е. уменьшить количество строк кода, за счет 
не явного описания функций в коде, которые используются всего лишь один раз.
    Функции имеют следующий тип данных → <class “function”>!
'''
#     У функции есть тип, значит мы можем создать переменную типа функции и
# положить в эту переменную какую-то другую функцию:

def f(x):
    return x ** 2
g = f  # g — это переменная, которая хранит в себе ссылку на функцию.
# Теперь в контексте этого приложения g может использоваться точно так же, как и f.
print(f(4)) # 16
print(g(4)) # 16

# Есть некая функция calc, которая принимает в качестве аргумента число, а в
# качестве результата возвращает это число + 10:
def calc1(x):
    return x + 10

print(calc1(10)) # 20

# Если мы добавим в код не только сложение, но и умножение, деление и вычитание,
# внутри одного кода будем плодить одинаковую логику.
# Достаточно взять функцию calc, которая будет в качестве аргумента
# принимать операцию и что-то выдавать.
def calc2(x):
    return x * 10
print(calc2(10)) # 20

#Пример 1.  Опишем логику для функции с двумя переменными:
#1.
def math(op, x):  # op — операция, воспринимается, как отдельная функция
                # в нашем случае, это сумма (sum), либо перемножение(mylt):
    print(op, x)

math(calc2, 10) # 100
#1.1
def sum(x, y):
    return x + y
#1.2
def mylt(x, y):
    return x * y
#2.
def calc(op, a, b):
    print(op(a, b))

calc(mylt, 4, 5) # 20

#3. Можно создать псевдоним для функции сложения (f).
def sum(x, y):
    return x + y
f = sum
calc(f, 4, 5) # 9


# Для более красивой и компактной записи нужно использовать LAMBDA-функцию,
# =>, чтобы вызвать функцию суммы, достаточно просто вызвать sum
# def sum(x, y):          |
#     return x + y        |# ⇔ (равносильно)    sum = lambda x, y: x + y

# Либо можно пропустить шаг создания переменной sum и сразу вызвать lambda:
calc(lambda x, y: x + y, 4, 5) # 9

'''
Задача 1. В списке хранятся числа. Нужно выбрать только чётные числа и составить
список пар (число; квадрат числа).
    Пример: 1 2 3 5 8 15 23 38
    Получить: [(2, 4), (8, 64), (38, 1444)]
'''
# Решение 1:
data = [1, 2, 3, 5, 8, 15, 23, 38]
out = []
for i in data :
    if i % 2 == 0:
        out.append((i, i ** 2))
print(out) # [(2, 4), (8, 64), (38, 1444)]

# Решение 2, используя lambda:
def select(f, col):
    return [f(x) for x in col]

def where(f, col):
    return [x for x in col if f(x)]

data = [1, 2, 3, 5, 8, 15, 23, 38]
res = select(int, data)
res = where(lambda x: x % 2 == 0, res)
print(res) # [2, 8, 38]
res = list(select(lambda x: (x, x ** 2), res))
print(res)# [(2, 4), (8, 64), (38, 1444)]

                    # 1. ФУНКЦИЯ map()
'''
    Функция map() применяет указанную функцию к каждому элементу
итерируемого объекта и возвращает итератор с новыми объектами.
Н-р,     f(x) => x + 10
        map(f, [ 1,   2,  3,  4,  5])
                 |    |   |   |   |
                [11, 12, 13,  14, 15]
Реализуем это в коде:
'''
list_1 = [x for x in range (1,10)]
print(list_1) #[1, 2, 3, 4, 5, 6, 7, 8, 9]
list_1 = list(map(lambda x: x + 10, list_1 ))# увеличиваем каждое число на 10
print(list_1) # [11, 12, 13, 14, 15, 16, 17, 18, 19]

'''
Задача 2. C клавиатуры вводится некий набор чисел, в качестве разделителя
используется пробел. Этот набор чисел будет считан в качестве строки.
    Функция строка.split() - убирает все пробелы и создаем
список из значений строки, пример:
    data = '1 2 3 5 8 15 23 38'.split()
    print(data) # ['1', '2', '3', '5', '8', '15', '23', '38']
'''
data = list(map(int,input().split())) # 2 6 45 12 44 3 0 1 5
# Результат работы map() — это итератор. По итератору можно пробежаться только
# один раз. Чтобы работать несколько раз с одними данными, нужно сохранить
# данные (например, в виде списка). map() позволит избавиться от функции select.

def where(f, col):
    return [x for x in col if f(x)]
# data = '1 2 3 5 8 15 23 38'.split() либо можно задать список в коде
res = map(int, data)
res = where(lambda x: x % 2 == 0, res)
res = list(map(lambda x: (x, x ** 2), res))
print(res) # [(2, 4), (6, 36), (12, 144), (44, 1936), (0, 0)]

                    # 2. ФУНКЦИЯ filter()
'''
    Функция filter() применяет указанную функцию к каждому элементу
итерируемого объекта и возвращает итератор с теми объектами, для которых
функция вернула True.
'''
#Н-р:
data = [x for x in range(10)] 
print(data) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
res = list(filter(lambda x: x % 2 == 0, data))  #все данные проходят 
                                                #через условие под функцией lambda 
print(res) # [0, 2, 4, 6, 8]

# Перепишем код с помощью функции filter(),
# это позволит избавиться от функции where, которую мы писали ранее
data = '1 2 3 5 8 15 23 38'.split()
res = map(int, data)
res = filter(lambda x: x % 2 == 0, res)
res = list(map(lambda x: (x, x ** 2), res))
print(res) # [(2, 4), (8, 64), (38, 1444)]

                    # 3. ФУНКЦИЯ zip()
'''
    Функция zip() применяется к набору итерируемых объектов и
возвращает итератор с кортежами из элементов входных данных.
'''
#Н-р:
users = ['user1', 'user2', 'user3', 'user4', 'user5']
ids = [4, 5, 9, 14, 7]
data = list(zip(users, ids))
print(data) # [('user1', 4), ('user2', 5), ('user3', 9), ('user4', 14), ('user5', 7)]

#Функция zip () пробегает по МИНИМАЛЬНОМУ ВХОДЯЩЕМУ НАБОРУ:
users = ['user1', 'user2', 'user3', 'user4', 'user5']
ids = [4, 5, 9, 14, 7]
salary = [111, 222, 333]
data = list(zip(users, ids, salary))
print(data) # [('user1', 4, 111), ('user2', 5, 222), ('user3', 333)]

                    # 4. ФУНКЦИЯ enumerate()
'''
    Функция enumerate() применяется к итерируемому объекту и
возвращает новый итератор с кортежами из индекса и элементов входных
данных.
'''
#Н-р:
users = ['user1', 'user2', 'user3']
data = list(enumerate(users))
print(data) # [(0, 'user1'), (1, 'user2'), (2, 'user3))]

                # II. ФАЙЛЫ
'''
Файлы в текстовом формате используются для:
    ● Хранения данных
    ● Передачи данных в клиент-серверных проектах
    ● Хранения конфигов
    ● Логирования действий

Что нужно для работы с файлами:
    1. Завести переменную, которая будет связана с этим текстовым файлом.
    2. Указать путь к файлу.
    3. Указать, в каком режиме мы будем работать с файлом.

Варианты режима (мод):
    1. a – открытие для добавления данных.
        ○ Позволяет дописывать что-то в имеющийся файл.
        ○ Если вы попробуете дописать что-то в несуществующий файл, то файл
            будет создан и в него начнётся запись.
'''
#Пример:
colors = ['red', 'green', 'blue']
data = open('file.txt', 'a') # здесь указываем режим, в котором будем работать
data.writelines(colors) # разделителей не будет
data.close()
'''
    ● data.close() — используется для закрытия файла, чтобы разорвать
    подключение файловой переменной с файлом на диске.
    ● exit() — позволяет не выполнять код, прописанный после этой команды в
    скрипте.
    ● В итоге создаётся текстовый файл с текстом внутри: redbluedreen.
    ● При повторном выполнении скрипта redbluedreenredbluedreen — добавление
    в существующий файл, а не перезапись файлов.
'''
# Ещё один способ записи данных в файл:
with open('file.txt', 'w') as data:
data.write('line 1\n')
data.write('line 2\n')

'''
    2. r – открытие для чтения данных.
        ○ Позволяет читать данные из файла.
        ○ Если вы попробуете считать данные из файла, которого не существует,
            программа выдаст ошибку.
'''
#Пример:
path = 'file.txt'
data = open(path, 'r')
for line in data:
    print(line)
data.close()
'''
    3. w – открытие для записи данных.
        ○ Позволяет записывать данные и создавать файл, если его не существует.
'''
#Пример:
colors = ['red', 'green', 'blue']
data = open('file.txt', 'w')
data.writelines(colors) # разделителей не будет
data.close()
# ● В итоге создаётся текстовый файл с текстом внутри: ‘redbluedreen’.
# ● В случае перезаписи новые данные записываются, а старые удаляются.

                    # III. МОДУЛЬ OS
'''    
    Модуль os предоставляет множество функций для работы с операционной системой, 
программы можно будет переносить из одной OS в другую.
    Для того, чтобы начать работать с данным модулем необходимо его импортировать
в свою программу:
                    import os
''' 
# Базовые функции данного модуля:
    # ● os.chdir(path) - смена текущей директории.
import os
os.chdir('C:/Users/79190/PycharmProjects/GB')

    # ● os.getcwd() - текущая рабочая директория
import os
print(os.getcwd()) # 'C:\Users\79190\PycharmProjects\webproject'

    # ● os.path - является вложенным модулем в модуль os и реализует некоторые
    # полезные функции для работы с путями, такие как:
        # ○ os.path.basename(path) - базовое имя пути
import os
print(os.path.basename('C:/Users/79190/PycharmProjects/webproject/main.py')) #
'main.py'

    # ● os.path.abspath(path) - возвращает нормализованный абсолютный путь.
import os
print(os.path.abspath('main.py'))
# 'C:/Users/79190/PycharmProjects/webproject/main.py'

                    # IV. МОДУЛЬ shutil
'''    
    Модуль shutil содержит набор функций высокого уровня для обработки файлов,
групп файлов, и папок. А так же копировать, перемещать и удалять файлы и папки. 
Часто используется вместе с модулем OS.
    Для того, чтобы начать работать с данным модулем необходимо его импортировать
в свою программу:
                    import shutil

Базовые функции данного модуля:
    ● shutil.copyfile(src, dst) - копирует содержимое (но не метаданные) файла src в
файл dst.
    ● shutil.copy(src, dst) - копирует содержимое файла src в файл или папку dst.
    ● shutil.rmtree(path) - Удаляет текущую директорию и все поддиректории; path
должен указывать на директорию, а не на символическую ссылку.